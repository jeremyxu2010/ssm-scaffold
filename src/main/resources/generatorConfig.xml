<?xml version="1.0" encoding="UTF-8"?>
    <!DOCTYPE generatorConfiguration
        PUBLIC "-//mybatis.org//DTD MyBatis Generator Configuration 1.0//EN"
        "http://mybatis.org/dtd/mybatis-generator-config_1_0.dtd">
    <generatorConfiguration>
        <!--导入属性配置 -->
        <properties resource="generator.properties" />
        <!--指定特定数据库的jdbc驱动jar包的位置 -->
        <classPathEntry location="${jdbc_driverLocation}" />
        <context id="default" targetRuntime="MyBatis3">
            <!-- 为生成的实体类添加equals，hashCode方法 -->
            <plugin type="org.mybatis.generator.plugins.EqualsHashCodePlugin" />
            <!-- 为生成的实体类添加toString方法 -->
            <plugin type="org.mybatis.generator.plugins.ToStringPlugin" />
            <!-- 修改生成的Example类的类名，将其中的Example修改为Criteria -->
            <plugin type="org.mybatis.generator.plugins.RenameExampleClassPlugin">
                <property name="searchString" value="Example$" />
                <property name="replaceString" value="Criteria" />
            </plugin>
            <!-- 修改生成的Mapper类中的方法名或参数名，将方法中的Example修改为Criteria，参数中的example修改为criteria -->
            <plugin type="personal.jeremyxu2010.mybatis.plugins.RenameExampleClassAndMethodsPlugin">
                <property name="classMethodSearchString" value="Example" />
                <property name="classMethodReplaceString" value="Criteria" />
                <property name="parameterSearchString" value="example" />
                <property name="parameterReplaceString" value="criteria" />
            </plugin>
            <!-- 使生成的Example类支持setOffset, setLimit方法，以便分页 -->
            <plugin type="personal.jeremyxu2010.mybatis.plugins.MySQLLimitPlugin" />
            <!-- 将生成的Example类放到filters包下，不跟实体类混在一起 -->
            <plugin type="personal.jeremyxu2010.mybatis.plugins.CreateSubPackagePlugin">
                <property name="exampleSubPackage" value="filters" />
                <property name="exampleClassSuffix" value="" />
            </plugin>

            <!-- optional，旨在创建class时，对注释进行控制 -->
            <commentGenerator>
                <!-- 生成的注释中不带时间戳 -->
                <property name="suppressDate" value="true" />
                <!-- 将数据库中列的注释生成到实体的属性注释里，这个很重要 -->
                <property name="addRemarkComments" value="true" />
            </commentGenerator>
            <!--jdbc的数据库连接 -->
            <jdbcConnection driverClass="${jdbc_driverClass}" connectionURL="${jdbc_url}" userId="${jdbc_user}" password="${jdbc_password}">
            </jdbcConnection>
            <!-- 非必需，类型处理器，在数据库类型和java类型之间的转换控制-->
            <javaTypeResolver>
                <property name="forceBigDecimals" value="false" />
            </javaTypeResolver>
            <!-- Model模型生成器,用来生成含有主键key的类，记录类 以及查询Example类
            targetPackage     指定生成的model生成所在的包名
            targetProject     指定在该项目下所在的路径
        -->
            <javaModelGenerator targetPackage="${modelPackage}" targetProject="${targetProject}">
                <!-- 是否对model添加 构造函数 -->
                <property name="constructorBased" value="false" />
                <!-- 是否允许子包，即targetPackage.schemaName.tableName -->
                <property name="enableSubPackages" value="false" />
                <!-- 建立的Model对象是否 不可改变  即生成的Model对象不会有 setter方法，只有构造方法 -->
                <property name="immutable" value="false" />
                <!-- 是否对类CHAR类型的列的数据进行trim操作 -->
                <property name="trimStrings" value="true" />
            </javaModelGenerator>
            <!--Mapper映射文件生成所在的目录 为每一个数据库的表生成对应的SqlMap文件 -->
            <sqlMapGenerator targetPackage="${XMLMapperPackage}" targetProject="${targetProject}">
                <property name="enableSubPackages" value="false" />
            </sqlMapGenerator>
            <javaClientGenerator type="XMLMAPPER" targetPackage="${daoPackage}" targetProject="${targetProject}">
            </javaClientGenerator>

            <!-- escapeWildcards设置为true可以帮助抵御SQL注入 -->
            <table tableName="user" escapeWildcards="true">
                <columnOverride column="user_status" javaType="personal.jeremyxu.entity.enums.UserState" />
            </table>
        </context>
    </generatorConfiguration>
